clear all;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Numerically obtained data for final comparison     %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

expt_sig11 = 0.002195;
expt_sig22 = 0.000862;
expt_sig33 = 0.002195;

expt_sig23 = -0.002131;
expt_sig13 = -1.813384;
expt_sig12 = 0.001612;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%	Part a: interior points 		       %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

c11 = 45
c12 = 11
c44 = 17

mu = c44;
nu = c12/(2*(c12 + c44));
lambda = 2*mu*nu/(1-2*nu);

eps11 = 0.0;
eps22 = 0.0;
eps33 = 0.0;
eps12 = 0.0;
eps13 = 0.129;
eps23 = 0.0;

eps21 = eps12;
eps31 = eps13;
eps32 = eps23;

a1 = 24;
a2 = a1;
a3 = 0.5*a1;

I1 = (2*pi*a1^2*a3)/(a1^2 - a3^2)^(3/2) * ...
	( acos(a3/a1) - a3/a1 * sqrt(1 - a3^2/a1^2) );
I2 = I1;
I3 = 4*pi - 2*I1;

I13 = (I1 - I3)/(a3^2 - a1^2);
I12 = pi/a1^2 - 1/4 * I13; 
I33 = 1/3 * (4*pi/a3^2 - 2*I13);

I11 = I22 = I12;
I23 = I13;

I21 = I12;
I32 = I23;
I31 = I13;

sig11 = 2*mu *( (a1^2/(8*pi*(1-nu)) * ((1-nu)/(1-2*nu) * 3*I11 ...
				+ (nu)/(1-2*nu) * (I21 + I31))...
	+ (1-2*nu)/(8*pi*(1-nu)) * ((1-nu)/(1-2*nu) * I1 ...
				- (nu)/(1-2*nu) * (I2 + I3)) ...
	- (1-nu)/(1-2*nu)) * eps11...
...
	+ (a2^2/(8*pi*(1-nu)) * ((1-nu)/(1-2*nu) * I12 ...
				+ (nu)/(1-2*nu) * (3*I22 + I32))...
	- (1-2*nu)/(8*pi*(1-nu)) * ((1-nu)/(1-2*nu) * I1 ...
				- (nu)/(1-2*nu) * (I2 - I3)) ...
	- (nu)/(1-2*nu)) * eps22 ...
...
	+ (a3^2/(8*pi*(1-nu)) * ((1-nu)/(1-2*nu) * I13 ...
				+ (nu)/(1-2*nu) * (3*I33 + I23))...
	- (1-2*nu)/(8*pi*(1-nu)) * ((1-nu)/(1-2*nu) * I1 ...
				- (nu)/(1-2*nu) * (I3 - I2)) ...
	- (nu)/(1-2*nu)) * eps33 );

sig22 = 2*mu *( (a2^2/(8*pi*(1-nu)) * ((1-nu)/(1-2*nu) * 3*I22 ...
				+ (nu)/(1-2*nu) * (I12 + I31))...
	+ (1-2*nu)/(8*pi*(1-nu)) * ((1-nu)/(1-2*nu) * I2 ...
				- (nu)/(1-2*nu) * (I3 + I1)) ...
	- (1-nu)/(1-2*nu)) * eps22...
...
	+ (a3^2/(8*pi*(1-nu)) * ((1-nu)/(1-2*nu) * I23 ...
				+ (nu)/(1-2*nu) * (3*I33 + I13))...
	- (1-2*nu)/(8*pi*(1-nu)) * ((1-nu)/(1-2*nu) * I2 ...
				- (nu)/(1-2*nu) * (I3 - I1)) ...
	- (nu)/(1-2*nu)) * eps33 ...
...
	+ (a1^2/(8*pi*(1-nu)) * ((1-nu)/(1-2*nu) * I21 ...
				+ (nu)/(1-2*nu) * (3*I11 + I13))...
	- (1-2*nu)/(8*pi*(1-nu)) * ((1-nu)/(1-2*nu) * I2 ...
				- (nu)/(1-2*nu) * (I1 - I3)) ...
	- (nu)/(1-2*nu)) * eps11 );

sig33 = 2*mu *( (a1^2/(8*pi*(1-nu)) * ((1-nu)/(1-2*nu) * 3*I33 ...
				+ (nu)/(1-2*nu) * (I23 + I13))...
	+ (1-2*nu)/(8*pi*(1-nu)) * ((1-nu)/(1-2*nu) * I3 ...
				- (nu)/(1-2*nu) * (I2 + I1)) ...
	- (1-nu)/(1-2*nu)) * eps33...
...
	+ (a2^2/(8*pi*(1-nu)) * ((1-nu)/(1-2*nu) * I31 ...
				+ (nu)/(1-2*nu) * (3*I11 + I21))...
	- (1-2*nu)/(8*pi*(1-nu)) * ((1-nu)/(1-2*nu) * I3 ...
				- (nu)/(1-2*nu) * (I1 - I2)) ...
	- (nu)/(1-2*nu)) * eps11 ...
...
	+ (a3^2/(8*pi*(1-nu)) * ((1-nu)/(1-2*nu) * I32 ...
				+ (nu)/(1-2*nu) * (3*I22 + I12))...
	- (1-2*nu)/(8*pi*(1-nu)) * ((1-nu)/(1-2*nu) * I3 ...
				- (nu)/(1-2*nu) * (I2 - I1)) ...
	- (nu)/(1-2*nu)) * eps22 );
   
sig12 = 2*mu* ( (a1^2 + a2^2)/(8*pi*(1-nu)) * I12 ...
		+ (1 - 2*nu)/(8*pi*(1-nu)) * (I1 + I2) - 1 )*eps12;

sig13 = 2*mu* ( (a1^2 + a3^2)/(8*pi*(1-nu)) * I13 ...
		+ (1 - 2*nu)/(8*pi*(1-nu)) * (I1 + I3) - 1 )*eps13;

sig23 = 2*mu* ( (a2^2 + a3^2)/(8*pi*(1-nu)) * I23 ...
		+ (1 - 2*nu)/(8*pi*(1-nu)) * (I2 + I3) - 1 )*eps23;

sig_in = zeros(3,3);

sig_in(1,1) = sig11;
sig_in(2,2) = sig22;
sig_in(3,3) = sig33;

sig_in(2,3) = sig23;
sig_in(1,3) = sig13;
sig_in(1,2) = sig12;

sig_in(3,2) = sig_in(2,3);
sig_in(3,1) = sig_in(1,3);
sig_in(2,1) = sig_in(1,2);

sigma = zeros(3,3);
delta = zeros(3,3);
delta(1,1) = 1;
delta(2,2) = 1;
delta(3,3) = 1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%	Part b: jump conditions 		       %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

nn = zeros(3,1);
nn = input ("enter surface normal in this [..; ..; ..] form:  ")

nk = sqrt(nn(1,1)^2 + nn(2,1)^2 + nn(3,1)^2);

epss = zeros(3,3);   %%% Eigen strain %%%

for i = 1:3
for j = 1:3

if(i == 1 && j == 1)
epss(i,j) =  eps11; 

elseif(i == 2 && j == 2)
epss(i,j) =  eps22;

elseif(i == 3 && j == 3)
epss(i,j) =  eps33;

elseif(i == 2 && j == 3)
epss(i,j) =  eps23;

elseif(i == 1 && j == 3)
epss(i,j) =  eps13;

elseif(i == 1 && j == 2)
epss(i,j) =  eps12;

endif

endfor
endfor

epss(3,2) = epss(2,3);
epss(3,1) = epss(1,3);
epss(2,1) = epss(1,2);

C = zeros(3,3,3,3);

C(1,1,1,1) = c11;
C(1,1,2,2) = c12;
C(1,2,1,2) = c44;
%% c11 %%
C(2,2,2,2) = C(1,1,1,1);
C(3,3,3,3) = C(1,1,1,1);
%% c12 %%
C(2,2,1,1) = C(1,1,2,2);
C(1,1,3,3) = C(3,3,1,1) = C(1,1,2,2);
C(2,2,3,3) = C(3,3,2,2) = C(1,1,2,2);
%% c44 %%
C(1,2,2,1) = C(2,1,1,2) = C(2,1,2,1)  =...
C(1,2,1,2);
C(1,3,1,3) = C(1,3,3,1) = C(3,1,1,3) = C(3,1,3,1)  =...
C(1,2,1,2);
C(2,3,2,3) = C(2,3,3,2) = C(3,2,2,3) = C(3,2,3,2)  =...
C(1,2,1,2);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% K_cof : below Eq. 6.9 	 %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

K_cof = zeros(3,3);

for i = 1:3
for j = 1:3
for k = 1:3
for l = 1:3 

K_cof(i,k) = K_cof(i,k) + C(i,j,k,l)*nn(j)*nn(l);

endfor
endfor
endfor
endfor

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Levi-Civita Tensor		 %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

epsilon_LC = zeros(3,3,3);

for i = 1:3
for j = 1:3
for k = 1:3

if (i == 1 && j == 2 && k == 3)
epsilon_LC(i,j,k) = 1;
elseif (i == 2 && j == 3 && k == 1)
epsilon_LC(i,j,k) = 1;
elseif (i == 3 && j == 1 && k == 2)
epsilon_LC(i,j,k) = 1;

elseif (i == 3 && j == 2 && k == 1)
epsilon_LC(i,j,k) = -1;
elseif (i == 1 && j == 3 && k == 2)
epsilon_LC(i,j,k) = -1;
elseif (i == 2 && j == 1 && k == 3)
epsilon_LC(i,j,k) = -1;
elseif (i == j || j==k || i==k)
epsilon_LC(i,j,k) = 0;
endif

endfor
endfor
endfor

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%   D-determinant : Eq. 6.9	 %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

D = 0;
for i = 1:3
for j = 1:3
for k = 1:3

D =  D + epsilon_LC(i,j,k)*K_cof(i,1)*K_cof(j,2)*K_cof(l,3);

endfor
endfor
endfor

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%    N-matrix : Eq. 6.9	 %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

N = zeros(3,3);

for i = 1:3
for j = 1:3
for k = 1:3
for l = 1:3 
for m = 1:3
for n = 1:3 

N(i,j) = N(i,j) + 0.5*epsilon_LC(i,k,l)...
		     *epsilon_LC(j,m,n)...
		     *K_cof(k,m)...
		     *K_cof(l,n);

endfor
endfor
endfor
endfor
endfor
endfor

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%********** Eq 6.8 **********%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

jmag = zeros(3,1);

jmag1 = 0;
jmag2 = 0;
jmag3 = 0;

for i = 1:3
for j = 1:3
for k = 1:3
for m = 1:3
for n = 1:3

jmag(i) = -(jmag(i) +  C(j,k,m,n)*epss(m,n)*nn(k)*N(i,j)/D);


endfor
endfor
endfor
endfor
endfor

jmag 


eps = zeros(3,3);

eps11 = 0;
eps22 = 0;
eps33 = 0;
eps23 = 0;
eps13 = 0;
eps12 = 0;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%********* Eq 6.10 using Eq 6.4 ********%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

eps(1,1) = jmag(1)*nn(1);
eps(2,2) = jmag(2)*nn(2);
eps(3,3) = jmag(3)*nn(3);
eps(2,3) = jmag(2)*nn(3);
eps(1,3) = jmag(1)*nn(3);
eps(1,2) = jmag(1)*nn(2);

eps(3,2) = jmag(3)*nn(2);
eps(3,1) = jmag(3)*nn(1);
eps(2,1) = jmag(2)*nn(1);



tot_eps = zeros(3,3);
tot_eps = eps + epss;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%********* Eq 6.11 ********%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

jump_fac = zeros(3,3);

jump_fac11 = 0;
jump_fac22 = 0;
jump_fac33 = 0;
jump_fac23 = 0;
jump_fac13 = 0;
jump_fac12 = 0;

for k = 1:3
for l = 1:3

jump_fac11 = jump_fac11 + C(1,1,k,l)*(tot_eps(k,l));
jump_fac22 = jump_fac22 + C(2,2,k,l)*(tot_eps(k,l));
jump_fac33 = jump_fac33 + C(3,3,k,l)*(tot_eps(k,l));
jump_fac23 = jump_fac23 + C(2,3,k,l)*(tot_eps(k,l));
jump_fac13 = jump_fac13 + C(1,3,k,l)*(tot_eps(k,l));
jump_fac12 = jump_fac12 + C(1,2,k,l)*(tot_eps(k,l));

endfor
endfor

jump_fac(1,1) = jump_fac11;
jump_fac(2,2) = jump_fac22;
jump_fac(3,3) = jump_fac33;
jump_fac(2,3) = jump_fac23;
jump_fac(1,3) = jump_fac13;
jump_fac(1,2) = jump_fac12;

jump_fac(3,2) = jump_fac(2,3);
jump_fac(3,1) = jump_fac(1,3);
jump_fac(2,1) = jump_fac(1,2);


sig_out = zeros(3,3);

sig_in				%% sigma inside
sig_out = sig_in + jump_fac	%% sigma outside


%%%%%%%%%%%% END OF MAIN SCRIPT %%%%%%%%%%%%%%%


nn
epss;
sig_in;
sig_out;

elastic_energy = 8*pi*(40*0.4)^3*mu/(45*(1-nu))*...
        (4*(eps11^2 + eps22^2 + eps33^2)...
        + (5*nu+1)*(eps11*eps22+eps22*eps33+eps33*eps11)...
        + (7-5*nu)*(eps12^2 + eps13^2 + eps23^2));
    
pct_error_S11 = abs((sig11 - expt_sig11));
pct_error_S22 = abs((sig22 - expt_sig22));
pct_error_S33 = abs((sig33 - expt_sig33));
pct_error_S23 = abs((sig23 - expt_sig23));
pct_error_S13 = abs((sig13 - expt_sig13));
pct_error_S12 = abs((sig12 - expt_sig12));

filename = "homogeneous_inclusion.dat";
fid = fopen (filename, "w");
fprintf(fid,"#Stress_component	Analytical	Numerical	Abs_error\n\n");
fprintf(fid,"sig11		%f	%f	%f	\n",sig11,expt_sig11,pct_error_S11);
fprintf(fid,"sig22		%f	%f	%f	\n",sig22,expt_sig22,pct_error_S22);
fprintf(fid,"sig33		%f	%f	%f	\n",sig33,expt_sig33,pct_error_S33);
fprintf(fid,"sig23		%f	%f	%f	\n",sig23,expt_sig23,pct_error_S23);
fprintf(fid,"sig13		%f	%f	%f	\n",sig13,expt_sig13,pct_error_S13);
fprintf(fid,"sig12		%f	%f	%f	\n",sig12,expt_sig12,pct_error_S12);
fclose (fid);
